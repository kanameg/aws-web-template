AWSTemplateFormatVersion: "2010-09-09"
Description: Network Template
Resources:
  # VPCの設定
  templateVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: template-vpc


  # -----------------------------------------------------------------
  # サブネット, ルートテーブル, インターネットゲートウェイの構築
  # -----------------------------------------------------------------
  
  # -----------------------------------------------------------------
  # アプリ用のプライベートサブネット
  # -----------------------------------------------------------------
  templateSubnetPrivateApp1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.8.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: template-subnet-private-app-1a
        - Key: Type
          Value: Isolated
  templateSubnetPrivateApp1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.9.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: template-subnet-private-app-1c
        - Key: Type
          Value: Isolated
  # -----------------------------------------------------------------
  # アプリ用のルートテーブル
  # -----------------------------------------------------------------
  templateRouteApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: templateVpc
      Tags:
        - Key: Name
          Value: template-route-app
  # -----------------------------------------------------------------
  # アプリネットへルート紐付け
  # -----------------------------------------------------------------
  templateRouteAppAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteApp
      SubnetId:
        Ref: templateSubnetPrivateApp1A
  templateRouteAppAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteApp
      SubnetId:
        Ref: templateSubnetPrivateApp1C

  # -----------------------------------------------------------------
  # DB用のプライベートサブネット
  # -----------------------------------------------------------------
  templateSubnetPrivateDb1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.16.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: template-subnet-private-db-1a
        - Key: Type
          Value: Isolated
  templateSubnetPrivateDb1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.17.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: template-subnet-private-db-1c
        - Key: Type
          Value: Isolated
  # -----------------------------------------------------------------
  # DB用のルートテーブル
  # -----------------------------------------------------------------
  templateRouteDb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: templateVpc
      Tags:
        - Key: Name
          Value: template-route-db
  # -----------------------------------------------------------------
  # DBサブネットへルート紐付け
  # -----------------------------------------------------------------
  templateRouteDbAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteDb
      SubnetId:
        Ref: templateSubnetPrivateDb1A
  templateRouteDbAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteDb
      SubnetId:
        Ref: templateSubnetPrivateDb1C

  # -----------------------------------------------------------------
  # Ingress用のパブリックサブネット
  # -----------------------------------------------------------------
  templateSubnetPublicIngress1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: template-subnet-public-ingress-1a
        - Key: Type
          Value: Public
  templateSubnetPublicIngress1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: template-subnet-public-ingress-1c
        - Key: Type
          Value: Public
  # -----------------------------------------------------------------
  # Ingress用のルートテーブル
  # -----------------------------------------------------------------
  templateRouteIngress:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: templateVpc
      Tags:
        - Key: Name
          Value: template-route-ingress
  # -----------------------------------------------------------------
  # Ingressサブネットへルート紐付け
  # -----------------------------------------------------------------
  templateRouteIngressAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteIngress
      SubnetId:
        Ref: templateSubnetPublicIngress1A
  templateRouteIngressAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteIngress
      SubnetId:
        Ref: templateSubnetPublicIngress1C
  # -----------------------------------------------------------------
  # Ingress用ルートテーブルのデフォルトルート
  # -----------------------------------------------------------------
  templateRouteIngressDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: templateRouteIngress
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: templateIgw
    DependsOn:
      - templateVpcgwAttachment

  # -----------------------------------------------------------------
  # 管理用のパブリックサブネット
  # -----------------------------------------------------------------
  templateSubnetPublicManagement1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.240.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: template-subnet-public-management-1a
        - Key: Type
          Value: Public
  templateSubnetPublicManagement1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.241.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: template-subnet-public-management-1c
        - Key: Type
          Value: Public
  # -----------------------------------------------------------------
  # 管理用サブネットのルートはIngressと同様として作成する
  # -----------------------------------------------------------------
  templateRouteManagementAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteIngress
      SubnetId:
        Ref: templateSubnetPublicManagement1A
  sbcntrRouteManagementAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: templateRouteIngress
      SubnetId:
        Ref: templateSubnetPublicManagement1C

  # -----------------------------------------------------------------
  # インターネットへ通信するためのゲートウェイの作成
  # -----------------------------------------------------------------
  templateIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: template-igw
  templateVpcgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: templateVpc
      InternetGatewayId:
        Ref: templateIgw

  # -----------------------------------------------------------------
  # VPCエンドポイント周りの設定
  # -----------------------------------------------------------------
  # -----------------------------------------------------------------
  # VPCエンドポイント(Egress通信)用のプライベートサブネット
  # -----------------------------------------------------------------
  templateSubnetPrivateEgress1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.248.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: template-subnet-private-egress-1a
        - Key: Type
          Value: Isolated
  templateSubnetPrivateEgress1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.249.0/24
      VpcId:
        Ref: templateVpc
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: template-subnet-private-egress-1c
        - Key: Type
          Value: Isolated

  # -----------------------------------------------------------------
  # セキュリティーグループの作成
  # -----------------------------------------------------------------
  # -----------------------------------------------------------------
  # インターネット公開のセキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ingress
      GroupName: ingress
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          Description: from ::/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: template-sg-ingress
      VpcId:
        Ref: templateVpc
  # -----------------------------------------------------------------
  # 管理用サーバ向けのセキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgManagement:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of management server
      GroupName: management
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: template-sg-management
      VpcId:
        Ref: templateVpc
  # -----------------------------------------------------------------
  # バックエンドアプリ用セキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgBackend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of backend app
      GroupName: backend-app
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: template-sg-backend-app
      VpcId:
        Ref: templateVpc
  # -----------------------------------------------------------------
  # フロントエンドコンテナアプリ用セキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgFrontend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of frontend app
      GroupName: frontend-app
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: template-sg-frontend-app
      VpcId:
        Ref: templateVpc
  # -----------------------------------------------------------------
  # 内部用ロードバランサ用のセキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgInternal:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for internal load balancer
      GroupName: internal
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: template-sg-internal
      VpcId:
        Ref: templateVpc
  # -----------------------------------------------------------------
  # DB用セキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgDb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of database
      GroupName: database
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: template-sg-db
      VpcId:
        Ref: templateVpc
  # -----------------------------------------------------------------
  # VPCエンドポイント用セキュリティグループの生成
  # -----------------------------------------------------------------
  templateSgEgress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of VPC Endpoint
      GroupName: egress
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: temaple-sg-vpce
      VpcId:
        Ref: templateVpc

  # -----------------------------------------------------------------
  # セキュリティーグループのルールを紐付け
  # -----------------------------------------------------------------
  # -----------------------------------------------------------------
  # インターネット側のロードバランサー ---> フロントエンドアプリ
  # Internet LB -> Front App
  # -----------------------------------------------------------------
  templateSgFrontendFromsSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for Ingress
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - templateSgFrontend
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgIngress
          - GroupId
      ToPort: 80
  # -----------------------------------------------------------------
  # フロントエンドアプリ ---> 内部ロードバランサー
  # Front App -> Internal LB
  # -----------------------------------------------------------------
  templateSgInternalFromSgFrontend:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for front container
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - templateSgInternal
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgFrontend
          - GroupId
      ToPort: 80
  # -----------------------------------------------------------------
  # 内部ロードバランサー ---> バックエンドアプリ
  # Internal LB -> Back App
  # -----------------------------------------------------------------
  templateSgBackendFromSgInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for internal lb
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - templateSgBackend
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgInternal
          - GroupId
      ToPort: 80
  # -----------------------------------------------------------------
  # バックエンドアプリ ---> データベース
  # Back App -> DB
  # -----------------------------------------------------------------
  templateSgDbFromSgBackendTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: MySQL protocol from backend App
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - templateSgDb
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgBackend
          - GroupId
      ToPort: 3306
  # -----------------------------------------------------------------
  # フロントエンドアプリ ---> データベース
  # Front App -> DB
  # -----------------------------------------------------------------
  templateSgDbFromSgFrontendTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: MySQL protocol from frontend App
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - templateSgDb
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgFrontend
          - GroupId
      ToPort: 3306
  # -----------------------------------------------------------------
  # マネージメント ---> データベース
  # Management server -> DB
  # -----------------------------------------------------------------
  templateSgDbFromSgManagementTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: MySQL protocol from management server
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - templateSgDb
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgManagement
          - GroupId
      ToPort: 3306
  # -----------------------------------------------------------------
  # マネージメント ---> 内部ロードバランサー
  # Management server -> Internal LB
  # -----------------------------------------------------------------
  templateSgInternalFromSgManagementTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for management server
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - templateSgInternal
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgManagement
          - GroupId
      ToPort: 80
  # -----------------------------------------------------------------
  # バックエンドアプリ ---> VPCエンドポイント
  # Back container -> VPC endpoint
  # -----------------------------------------------------------------
  templaeSgVpceFromSgBackendTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for Backend App
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - templateSgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgBackend
          - GroupId
      ToPort: 443
  # -----------------------------------------------------------------
  # フロントエンドアプリ ---> VPCエンドポイント
  # Front End -> VPC endpoint
  # -----------------------------------------------------------------
  temapleSgVpceFromSgFrontendTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for Frontend App
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - templateSgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgFrontend
          - GroupId
      ToPort: 443
  # -----------------------------------------------------------------
  # マネージメント ---> VPCエンドポイント
  # Management Server -> VPC endpoint
  # -----------------------------------------------------------------
  templateSgVpceFromSgManagementTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for management server
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - templateSgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - templateSgManagement
          - GroupId
      ToPort: 443
      